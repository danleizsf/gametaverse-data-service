# This is a basic workflow to help you get started with Actions

name: deploy to lambda

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deply_zip:
    name: deploy lambda function
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.x]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -a -o main main.go && zip deployment.zip main 

      # Runs a set of commands using the runners shell
      - name: Default deploy
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: getGamerPerformance
          zip_file: deployment.zip
          memory_size: 128
          timeout: 10
          handler: main
          role: arn:aws:iam::851823330374:role/service-role/getGamerPerformance-role-tjckx66p
          runtime: go 1.x
